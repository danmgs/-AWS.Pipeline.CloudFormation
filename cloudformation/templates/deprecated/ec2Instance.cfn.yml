################################################################################
#
# Cloud formation child template
# Author: NGUYEN Daniel
#
# - Creation of the EC2 Instance with setup of CodeDeploy agent.
#
################################################################################

AWSTemplateFormatVersion: 2010-09-09

Description: Creation of the EC2 Instance with setup of CodeDeploy agent.

Parameters:

  VPC:
    Description: VPC to create the security group and EC2 instance into
    Type: AWS::EC2::VPC::Id
    AllowedPattern : "^(?:vpc-[0-9a-z]+|)$"
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t1.micro, t2.nano, t2.micro, t2.small, t2.medium, t2.large, m1.small,
      m1.medium, m1.large, m1.xlarge, m2.xlarge, m2.2xlarge, m2.4xlarge, m3.medium,
      m3.large, m3.xlarge, m3.2xlarge, m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge,
      m4.10xlarge, c1.medium, c1.xlarge, c3.large, c3.xlarge, c3.2xlarge, c3.4xlarge,
      c3.8xlarge, c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, g2.2xlarge,
      g2.8xlarge, r3.large, r3.xlarge, r3.2xlarge, r3.4xlarge, r3.8xlarge, i2.xlarge,
      i2.2xlarge, i2.4xlarge, i2.8xlarge, d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge,
      hi1.4xlarge, hs1.8xlarge, cr1.8xlarge, cc2.8xlarge, cg1.4xlarge]
  AMIId:
    Description: The AMI ID
    Type: String
    Default: ami-00ee6651b7f9ca24d
    AllowedPattern : "^(?:ami-[0-9a-z]+|)$"
    ConstraintDescription: must be a valid AMI ID.
  SSHFrom:
    Description: Limit SSH access to a CIDR IP block
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Default: 'EC2 Tutorial'
    Description: KeyName
  EC2TagKey0:
    Type: String
    Default: ec2TagKey0
    Description: The Tag for EC2
  EC2TagValue0:
    Type: String
    Default: ec2TagValue0
    Description: The Tag Value for EC2

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "EC2 Configuration"
        Parameters:
          - VPC
          - InstanceType
          - SSHFrom
          - KeyName
          - EC2TagKey0
          - EC2TagValue0

Resources:

  SSHSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub SSH Security group for ${AWS::StackName}
      SecurityGroupIngress:
        - CidrIp: !Ref SSHFrom
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          Description: SSH for SSHFrom source
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-SSHSecurityGroup"

  WebSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub Web Security group for ${AWS::StackName}
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-WebSecurityGroup"

  EC2RoleInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref EC2ServiceRole

  EC2ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      # RoleName: !Sub "${AWS::StackName}-EC2RoleforAWSCodeDeploy" # runs into errors if too long > 64 chars. let AWS generate the role
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy"
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole

  EC2Instance:
    Type: AWS::EC2::Instance
    Metadata:
      Comment: Install some config sets
      AWS::CloudFormation::Init:
        configSets:
          default:
            - 01_setup-CfnHup
            - 02_setup-various-tools
            - 03_setup-apache-httpd
            - 04_setup_amazon-codedeploy-agent
            - 05_setup-amazon-cloudwatch-agent
        01_setup-CfnHup:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: "000400"
              owner: "root"
              group: "root"
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}
              mode: "000400"
              owner: "root"
              group: "root"
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        02_setup-various-tools:
          packages:
            yum:
              git: []
              # aws-cli: [] # not required for this eu-west-3 AMI
          files:
            /home/ec2-user/.aws/config:
              mode: '000755'
              owner: ec2-user
              group: root
              content: !Sub |
                [default]
                region = ${AWS::Region}
        03_setup-apache-httpd:
          packages:
            yum:
              httpd: []
          files:
            /var/www/html/index.html:
              content:
                !Join [ "\n", [ "<h1>Hi There !</h1>", "<h2>Congratulations, you have successfully launched the AWS CloudFormation sample.</h2>" ] ]
              mode: '000644'
              owner: root
              group: root
          commands:
            03-1-edit-existing-html:
              command: "echo \"<h2>You get response from machine $(hostname -f).</h2><br/>(Type F5 to load-balance)\" >> index.html"
              cwd: "/var/www/html/"
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
        04_setup_amazon-codedeploy-agent:
          packages:
            yum:
              ruby: []
          files:
            /home/ec2-user/install:
              source:
                !Join [ "", [ "http://aws-codedeploy-", !Ref "AWS::Region",".s3.amazonaws.com/latest/install" ] ]
              mode: '000755'
          commands:
            04-1-install-agent:
              command: "./install auto"
              cwd: "/home/ec2-user/"
          services:
            sysvinit:
              codedeploy-agent:
                enabled: 'true'
                ensureRunning: 'true'
        05_setup-amazon-cloudwatch-agent:
          packages:
            yum:
              awslogs: []
          commands:
            05-1-edit-awslogs-agent-config:
              command: !Sub "sed -i 's/us-east-1/${AWS::Region}/g' awscli.conf"
              cwd: "/etc/awslogs/"
            05-2-edit-awslogs-agent-config-to-watch-codedeploy-logs:
              command:
                !Sub |
                  cat <<EOF >> awslogs.conf

                  [codedeploy-agent-deployments-logs]
                  datetime_format = %b %d %H:%M:%S
                  file = /opt/codedeploy-agent/deployment-root/deployment-logs/codedeploy-agent-deployments.log
                  buffer_duration = 5000
                  log_stream_name = {instance_id}
                  initial_position = start_of_file
                  log_group_name = codedeploy-agent-deployments-logs
                  EOF
              cwd: "/etc/awslogs/"
          services:
            sysvinit:
              awslogsd:
                enabled: 'true'
                ensureRunning: 'true'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    Properties:
      KeyName: !Ref KeyName
      InstanceType: !Ref InstanceType
      # Note we use the pseudo parameter AWS::Region
      ImageId: !Ref AMIId
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      IamInstanceProfile: !Ref EC2RoleInstanceProfile
      SecurityGroupIds:
        - !GetAtt SSHSecurityGroup.GroupId
        - !GetAtt WebSecurityGroup.GroupId
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -xe
            # Get the latest CloudFormation package
            yum update -y
            yum install -y aws-cfn-bootstrap
            # Start cfn-init
            /opt/aws/bin/cfn-init -s ${AWS::StackId} -r EC2Instance --region ${AWS::Region} --configsets default || error_exit 'Failed to run cfn-init'
            # Start up the cfn-hup daemon to listen for changes to the EC2 instance metadata
            /opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'
            # All done so signal success
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region}
      Tags:
        - Key: !Ref EC2TagKey0
          Value: !Ref EC2TagValue0
        - Key: Name
          Value: !Sub "${AWS::StackName}-EC2Instance"

Outputs:

  EC2Instance:
    Description: The EC2 Instance ID
    Value: !Ref EC2Instance
    Export:
      Name: !Sub ${AWS::StackName}-EC2Instance

  SSHSecurityGroup:
    Description: The EC2 SSH Security Group
    Value: !Ref SSHSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-SSHSecurityGroup

  WebSecurityGroup:
    Description: The EC2 Web Security Group
    Value: !Ref WebSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-WebSecurityGroup
